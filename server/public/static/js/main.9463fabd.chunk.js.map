{"version":3,"sources":["components/loader/Loader.js","components/addBookForm/components/AuthorOptions.js","queries/index.js","components/addBookForm/AddBookForm.js","components/bookList/components/Book.js","components/bookList/components/BookDetailsView.js","components/bookList/components/BookDetails.js","components/bookList/BookListView.js","components/bookList/BookList.js","App.js","serviceWorker.js","index.js"],"names":["Loader","showIf","className","AuthorOptions","authors","map","author","key","id","value","name","getBooksQuery","gql","getAuthorsQuery","getBookQuery","addBookMutation","initialValues","genre","authorId","compose","graphql","authorsQuery","useState","formValues","setFormValues","loading","onSubmit","e","preventDefault","variables","refetchQueries","query","type","onChange","target","Book","book","bookSelected","setBookSelected","classNames","selected","onClick","BookDetailsView","books","item","options","props","bookId","data","BookListView","client","ApolloClient","uri","process","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.9463fabd.chunk.js","sourcesContent":["import React from 'react';\r\nimport './loader.css';\r\n\r\nconst Loader = ({ showIf }) => {\r\n    if(!showIf){\r\n        return null;\r\n    }\r\n\r\n    return(\r\n        <div className=\"loader\">\r\n            <div className=\"circular-progress\"></div> \r\n        </div> \r\n    )\r\n}\r\n\r\nexport default Loader;","import React, { Fragment } from 'react';\r\n\r\nconst AuthorOptions = ({ showIf, authors }) => {\r\n    if(!showIf){\r\n        return null;\r\n    }\r\n\r\n    return(\r\n        <Fragment>\r\n            {authors.map(author => <option key={author.id} value={author.id}>{author.name}</option>)}\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default AuthorOptions;","import { gql } from 'apollo-boost';\r\n\r\nconst getBooksQuery = gql`\r\n{\r\n    books{\r\n        name\r\n        id\r\n    }\r\n}\r\n`\r\n\r\nconst getAuthorsQuery = gql`\r\n{\r\n    authors{\r\n        name\r\n        id\r\n    }\r\n}\r\n`\r\n\r\nconst getBookQuery = gql`\r\nquery GetBook($id: ID!){\r\n    book(id: $id) {\r\n        id\r\n        name\r\n        genre\r\n        author {\r\n            id\r\n            name\r\n            dateOfBirth\r\n            books {\r\n                name\r\n                id\r\n            }\r\n        }\r\n    }\r\n}\r\n`;\r\n\r\n\r\n// !: required\r\nconst addBookMutation = gql`\r\nmutation AddBook($name: String!, $genre: String!, $authorId: String!){\r\n    addBook(name:$name, genre: $genre, authorId: $authorId){\r\n        name\r\n        id\r\n    }\r\n}\r\n`\r\n\r\nexport { \r\n    getBooksQuery, \r\n    getAuthorsQuery, \r\n    addBookMutation,\r\n    getBookQuery\r\n}","import React, { Fragment, useState } from \"react\";\r\nimport { graphql } from \"react-apollo\";\r\nimport { flowRight as compose } from \"lodash\";\r\nimport Loader from \"../loader/Loader\";\r\nimport AuthorOptions from \"./components/AuthorOptions\";\r\nimport { getAuthorsQuery, addBookMutation, getBooksQuery } from \"../../queries\";\r\nimport \"./addBookForm.css\";\r\n\r\nconst initialValues = {\r\n  name: \"\",\r\n  genre: \"\",\r\n  authorId: \"\"\r\n};\r\n\r\nconst AddBookForm = ({ authorsQuery, addBookMutation }) => {\r\n  const [formValues, setFormValues] = useState(initialValues);\r\n\r\n  const { loading, authors } = authorsQuery;\r\n  const handleSubmit = e => {\r\n    e.preventDefault();\r\n    const { name, genre, authorId } = formValues;\r\n\r\n    addBookMutation({\r\n      variables: {\r\n        name,\r\n        genre,\r\n        authorId\r\n      },\r\n      refetchQueries: [{ query: getBooksQuery }]\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      <form id=\"add-book\" onSubmit={handleSubmit}>\r\n        <div className=\"field\">\r\n          <label>Book name:</label>\r\n          <input\r\n            type=\"text\"\r\n            onChange={e =>\r\n              setFormValues({ ...formValues, name: e.target.value })\r\n            }\r\n          />\r\n        </div>\r\n\r\n        <div className=\"field\">\r\n          <label>Genre:</label>\r\n          <input\r\n            type=\"text\"\r\n            onChange={e =>\r\n              setFormValues({ ...formValues, genre: e.target.value })\r\n            }\r\n          />\r\n        </div>\r\n\r\n        <div className=\"field\">\r\n          <label>Author:</label>\r\n          <select\r\n            onChange={e =>\r\n              setFormValues({ ...formValues, authorId: e.target.value })\r\n            }\r\n          >\r\n            <option>Select author</option>\r\n            <AuthorOptions showIf={!loading} authors={authors} />\r\n          </select>\r\n        </div>\r\n\r\n        <button type=\"submit\">+</button>\r\n      </form>\r\n      <Loader showIf={loading} />\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default compose(\r\n  graphql(getAuthorsQuery, { name: \"authorsQuery\" }),\r\n  graphql(addBookMutation, { name: \"addBookMutation\" })\r\n)(AddBookForm);\r\n","import React from \"react\";\r\nimport classNames from \"classnames\";\r\nimport \"./book.css\";\r\n\r\nconst Book = ({ book, bookSelected, setBookSelected }) => {\r\n  if (!book) {\r\n    return null;\r\n  }\r\n\r\n  const { name, id } = book;\r\n  const handleClick = e => setBookSelected(id);\r\n  const className = classNames({\r\n    \"book-list-button\": true,\r\n    selected: bookSelected === id\r\n  });\r\n\r\n  return (\r\n    <li className={className} onClick={handleClick}>\r\n      {name}\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default Book;\r\n","import React, { Fragment } from 'react';\r\n\r\nconst BookDetailsView = ({showIf, book}) => {\r\n\r\n    if(!showIf){\r\n        return null;\r\n    }\r\n\r\n    const { genre, author } = book;\r\n\r\n    return (\r\n        <Fragment>\r\n            <p>{ genre }</p>\r\n            <p>{ author.name }</p>\r\n            <p>All books by this author:</p>\r\n            <ul className=\"other-books\">\r\n                { author.books.map(item => {\r\n                    return <li key={item.id}>{ item.name }</li>\r\n                })}\r\n            </ul>\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default BookDetailsView;","import React from \"react\";\r\nimport { graphql } from \"react-apollo\";\r\nimport Loader from \"../../loader/Loader\";\r\nimport { getBookQuery } from \"../../../queries\";\r\nimport BookDetailsView from \"./BookDetailsView\";\r\nimport \"./bookDetails.css\";\r\n\r\nconst BookDetails = ({ showIf, data }) => {\r\n  if (!showIf) {\r\n    return null;\r\n  }\r\n\r\n  const { book, loading } = data;\r\n\r\n  return (\r\n    <div id=\"book-details\">\r\n      <BookDetailsView showIf={!loading && book} book={book} />\r\n      <Loader showIf={loading} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default graphql(getBookQuery, {\r\n  options: props => {\r\n    return {\r\n      variables: {\r\n        id: props.bookId\r\n      }\r\n    };\r\n  }\r\n})(BookDetails);\r\n","import React, { Fragment, useState } from \"react\";\r\nimport Book from \"./components/Book\";\r\nimport BookDetails from \"./components/BookDetails\";\r\nimport \"./bookList.css\";\r\n\r\nconst BookListView = ({ books }) => {\r\n  const [bookSelected, setBookSelected] = useState(null);\r\n\r\n  if (!books) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <ul id=\"book-list\">\r\n      {books.map(book => (\r\n        <Fragment key={book.id}>\r\n          <Book\r\n            book={book}\r\n            bookSelected={bookSelected}\r\n            setBookSelected={setBookSelected}\r\n          />\r\n          <BookDetails showIf={bookSelected === book.id} bookId={book.id} />\r\n        </Fragment>\r\n      ))}\r\n    </ul>\r\n  );\r\n};\r\n\r\nexport default BookListView;\r\n","import React, { Fragment } from 'react';\r\nimport { graphql } from 'react-apollo';\r\nimport BookListView from './BookListView';\r\nimport Loader from '../loader/Loader';\r\nimport { getBooksQuery } from '../../queries';\r\n\r\nconst BookList = ({ data }) => {\r\n    const { books, loading } = data;\r\n\r\n    return(\r\n        <Fragment>\r\n            <BookListView books={books}/>\r\n            <Loader showIf={loading}/>\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default graphql(getBooksQuery)(BookList);","import React from \"react\";\r\nimport ApolloClient from \"apollo-boost\";\r\nimport { ApolloProvider } from \"react-apollo\";\r\nimport AddBookForm from \"./components/addBookForm/AddBookForm\";\r\nimport BookList from \"./components/bookList/BookList\";\r\n\r\nconst client = new ApolloClient({\r\n  uri: process.env.REACT_APP_URL\r\n});\r\n\r\nfunction App() {\r\n  return (\r\n    <div id=\"main\">\r\n      <h1>Book's List</h1>\r\n      <ApolloProvider client={client}>\r\n        <AddBookForm />\r\n        <BookList />\r\n      </ApolloProvider>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}